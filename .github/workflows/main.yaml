name: Actions ðŸ˜Ž

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  actions: write
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test my project ðŸ§ª
    runs-on: ubuntu-latest
    env:
      PROJECT_DIR: unity
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - uses: actions/cache@v4
        with:
          path: ${{ env.PROJECT_DIR }}/Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Run tests
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: unity
          githubToken: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build my project âœ¨
    runs-on: ubuntu-latest
    env:
      PROJECT_DIR: unity
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - uses: actions/cache@v3
        with:
          path: ${{ env.PROJECT_DIR }}/Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: unity
          targetPlatform: StandaloneWindows64
          allowDirtyBuild: true

      - uses: actions/upload-artifact@v4
        with:
          name: Build
          path: build

  release:
    name: Release to GitHub ðŸš€
    runs-on: ubuntu-latest
    needs: build
    env:
      EXPORT_NAME: ogwp
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: releases

      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Zip windows build
        run: zip -r ${{ env.EXPORT_NAME }}_${{ github.ref_name }}_windows.zip .
        working-directory: releases

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "ðŸš€ New build released!"
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ github.ref_name }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          files: releases/*.zip
